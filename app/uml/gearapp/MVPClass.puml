@startuml
AbstractPresenter <|-- PresenterDataWrapper
AbstractPresenter <|-- PresenterAWrapper
AbstractPresenter <|-- PresenterBWrapper
PresenterDataWrapper <|--- PresenterA

BaseContract.BasePresenter <|---- ContractA.Presenter
BaseContract.BaseView <|---- ContractA.View

ContractA.View <|.. ActivityA
ContractA.Presenter <|.. PresenterA

BasePActivity <|--- ActivityA

PresenterA o-  ActivityA
ActivityA *- PresenterA

abstract class AbstractPresenter<V : BaseContract.BaseView> {
    +var mView = v
    # set
}
class PresenterDataWrapper<R : Any,V : BaseContract.BaseView>{
    +lateinit var mData : R
    #set
    #open fun processData(d : R?) {}
    #open fun errorData(error : String) {}
}
interface BaseContract.BaseView {
    +updateUI()
    +showToast(str : String)
    +onDialog(show : Boolean)
    +<R : Any?> getLifecycle2() : LifecycleTransformer<R>
    +<R : Any?> getLifecycleDestroy() : LifecycleTransformer<R>
}

interface BaseContract.BasePresenter<out T> {
    +fetch()
    +refreshData()
    +getData() : T
    +close()
}
interface ContractA.Presenter<out T>
interface ContractA.View

abstract class BasePActivity<T : BaseContract.BasePresenter<*>>{
    #lateinit var mPresenter : T
}
@enduml